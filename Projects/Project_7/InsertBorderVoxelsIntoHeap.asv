function InsertBorderVoxelsIntoHeap(dmapi,mode,nbi)
global dmap Active Edges
if nargin<3 || isempty(nbi)
    nbi=[];
end
if mode==1
    nodes =find(dmapi(:)<0); %foreground pixels
end
if mode==-1
    nodes = find(dmapi(:)>0); %background pixels
end
if ~isempty(nbi)
    nodes=intersect(nodes,nbi.q(1,1:nbi.len));
end
for i_nodes=1:length(nodes)
    node_dist=dmapi(nodes(i_nodes));
    neibs=Edges(nodes(i_nodes),:);
    for i_neibs=1:length(neibs)
        if neibs(i_neibs)
            neib_dist=dmapi(neibs(i_neibs));
            if neib_dist*node_dist<0
                node_dist_abs=abs(node_dist);
                
                
                %                 L=neibs(1);
                %                 R=neibs(2);
                %                 D=neibs(3);
                %                 U=neibs(4);
                %
                %                 if L&&R
                %                     L_dist=abs(dmapi(L));
                %                     R_dist=abs(dmapi(R));
                %                     x=min([node_dist_abs/(L_dist+node_dist_abs) node_dist_abs/(R_dist+node_dist_abs)]);
                %                 end
                %                 if L==0
                %                     x=node_dist_abs/(R_dist+node_dist_abs);
                %                 end
                %                 if R==0
                %                     x=node_dist_abs/(L_dist+node_dist_abs);
                %                 end
                %
                %                 if D&&U
                %                     D_dist=abs(dmapi(D));
                %                     U_dist=abs(dmapi(U));
                %                     y=min([node_dist_abs/(D_dist+node_dist_abs) node_dist_abs/(U_dist+node_dist_abs)]);
                %                 end
                %                 if D==0
                %                     y=node_dist_abs/(U_dist+node_dist_abs);
                %                 end
                %                 if U==0
                %                     y=node_dist_abs/(D_dist+node_dist_abs);
                %                 end
                %% get valid neighbours
                if sign(dmapi(neibs(1)))==mode
                    L=neibs(1);
                else
                    L=0;
                end
                if sign(dmapi(neibs(2)))==mode
                    R=neibs(2);
                else
                    R=0;
                end
                if sign(dmapi(neibs(3)))==mode
                    D=neibs(3);
                else
                    D=0;
                end
                if sign(dmapi(neibs(4)))==mode
                    U=neibs(4);
                else
                    U=0;
                end
                %% get distance of valid neighbours
                %% LR
                if L==0 && R
                    x=node_dist/(dmapi(R)+node_dist);
                end
                if R==0 && L
                    x=node_dist/(dmapi(L)+node_dist);
                end
                if R==0 && L==0
                    x=Inf;
                end
                
                if L&&R
                    x=min([node_dist/(dmapi(L)+node_dist) node_dist/(dmapi(R)+node_dist)]);
                end
                %% DU
                if D&&U
                    y=min([node_dist/(dmapi(D)+node_dist) node_dist/(dmapi(U)+node_dist)]);
                end
                if D==0 && U
                    y=node_dist/(dmapi(D)+node_dist);
                end
                if U==0 && D
                    y=node_dist/(dmapi(D)+node_dist);
                end
                if D==0 && U==0
                    y=Inf;
                end
                
                dist=sqrt((1/x^2+1/y^2)^-1);
                dmap(nodes(i_nodes))=dist;
                HeapInsert(nodes(i_nodes),dist);
                Active(nodes(i_nodes))=2;
                
            end
        end
    end
end
